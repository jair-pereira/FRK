Generation:
15

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_random
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(U, n=1, k=int(n*0.50))
    S2 = op.select_current(X)
    U  = op.w_crx_blend2(S1, S2, alpha=0.10)
    X  = op.replace_if_best(X, U)
    #Round 2
    S1 = op.select_tournament(X, n=1, k=int(n*0.10))
    U  = op.w_levy_flight(S1)
    X  = U
    [Xi.getFitness() for Xi in X]
  return X
ge(200, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[734, 120, 890, 274, 870, 766, 850, 862, 822, 5, 111, 374, 995, 982, 6, 23, 219, 385, 768, 657, 202, 304, 942, 733, 844, 217, 498, 193, 705, 218, 953, 6, 394, 740, 785, 241, 864, 747, 254, 890, 287, 498, 403]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_random> op.repair_random)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.50)) ))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}U  =  (<operator2> (<op_crx_blend> op.w_crx_blend2(S1, S2, alpha= (<alpha> 0.10) ))) {::}X  =  (<output> (<update_best> op.replace_if_best(X, U))) {::}) {::}#Round 2{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.10)) ))) {::}U  =  (<operator1> (<op_cs> op.w_levy_flight(S1))) {::}X  =  (<output_last> (<update_all> U)) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 200) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
1003.5740387910314
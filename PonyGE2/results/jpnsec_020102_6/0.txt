Generation:
0

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_random
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(X, n=1, k=int(n*0.50))
    U = op.w_levy_flight(S1)
    X  = op.replace_if_random(X, U)
    #Round 2
    S1 = op.select_random(U, 1)
    U = op.w_mut_uni(S1, pr=0.10)
    X  = op.replace_if_best(X, U)
    #Round 3
    S1 = op.select_tournament(U, n=1, k=int(n*0.25))
    S2 = op.select_tournament(U, n=1, k=int(n*0.50))
    U  = op.w_crx_exp2(S1, S2, pr=0.25)
    X  = op.replace_if_best(X, U)
    #Round Drop
    X = op.drop_probability(X, pr=0.10)
    [Xi.getFitness() for Xi in X]
  return X
ge(200, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[240, 762, 662, 425, 491, 671, 756, 121, 294, 940, 891, 763, 450, 578, 449, 882, 633, 79, 111, 167, 540, 945, 529, 818, 607, 346, 137, 175, 374, 436, 841, 251, 411, 946, 717, 766, 280, 112, 184, 723, 190, 339, 462, 912, 291, 269, 61, 312, 105, 669, 646, 271, 532, 69, 656, 311, 408, 1, 989, 188, 516, 195, 989, 309]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_random> op.repair_random)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.50)) ))) {::}U =  (<operator1> (<op_cs> op.w_levy_flight(S1))) {::}X  =  (<output> (<update_better_than_random> op.replace_if_random(X, U))) {::}) {::}#Round 2{::} (<step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}U =  (<operator1> (<op_mut_uni> op.w_mut_uni(S1, pr= (<pr> 0.10) ))) {::}X  =  (<output> (<update_best> op.replace_if_best(X, U))) {::}) {::}#Round 3{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.25)) ))) {::}S2 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.50)) ))) {::}U  =  (<operator2> (<op_crx_exp> op.w_crx_exp2(S1, S2, pr= (<pr> 0.25) ))) {::}X  =  (<output_last> (<update_best> op.replace_if_best(X, U))) {::})) {::}#Round Drop{::} (<drop> (<drop_random> X = op.drop_probability(X, pr= (<pr> 0.10) ){::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 200) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
-209.87464140894784
Generation:
0

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_truncate
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(X, n=1, k=int(n*0.25))
    S2 = op.select_random(X, 1)
    U  = op.w_crx_blend2(S1, S2, alpha=0.10)
    X  = U
    #Round 2
    S1 = op.select_tournament(X, n=1, k=int(n*0.10))
    S2 = op.select_tournament(X, n=1, k=1)
    U  = op.w_crx_uni2(S1, S2, pr=0.10)
    X  = U
    #Round 3
    S1 = op.select_tournament(U, n=1, k=int(n*0.10))
    S2 = op.select_tournament(X, n=1, k=int(n*0.50))
    U  = op.w_crx_blend2(S1, S2, alpha=0.01)
    X  = op.replace_if_random(X, U)
    #Round Drop
    X = op.drop_worst(X, pr=1.00, k=int(n*0.10)) 
    [Xi.getFitness() for Xi in X]
  return X
ge(400, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[375, 850, 799, 895, 761, 665, 517, 136, 917, 642, 740, 363, 175, 374, 612, 923, 861, 740, 152, 379, 55, 257, 298, 547, 805, 481, 592, 972, 833, 154, 500, 204, 995, 262, 691, 371, 499, 253, 235, 296, 434, 321, 360, 438, 793, 335, 604, 779, 501, 19, 121, 691, 959, 574, 67, 887, 347, 378, 176, 401, 983, 209, 583, 670, 928, 546, 918, 447, 203, 776, 867, 6, 653, 434, 585, 28, 832, 129, 979]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_truncate> op.repair_truncate)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.25)) ))) {::}S2 =  (<select> (<select_random> op.select_random( (<X_or_U> X) , 1))) {::}U  =  (<operator2> (<op_crx_blend> op.w_crx_blend2(S1, S2, alpha= (<alpha> 0.10) ))) {::}X  =  (<output> (<update_all> U)) {::}) {::}#Round 2{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.10)) ))) {::}S2 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> 1) ))) {::}U  =  (<operator2> (<op_crx_uni> op.w_crx_uni2(S1, S2, pr= (<pr> 0.10) ))) {::}X  =  (<output> (<update_all> U)) {::}) {::}#Round 3{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.10)) ))) {::}S2 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.50)) ))) {::}U  =  (<operator2> (<op_crx_blend> op.w_crx_blend2(S1, S2, alpha= (<alpha> 0.01) ))) {::}X  =  (<output_last> (<update_better_than_random> op.replace_if_random(X, U))) {::})) {::}#Round Drop{::} (<drop> (<drop_worst> X = op.drop_worst(X, pr= (<pr> 1.00) , k= (<k> int(n*0.10)) ) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 400) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
79.48
Generation:
4

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_truncate
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_current(X)
    U = op.w_pso(S1, w=0.50, c1=0.25, c2=1.00)
    X  = X
    #Round 2
    S1 = op.select_current(U)
    S2 = op.select_current(X)
    S3 = op.select_current(X)
    U  = op.w_mut_de(S1, S2, S3, beta=0.75)
    X  = U
    [Xi.getFitness() for Xi in X]
  return X
ge(200, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[891, 87, 399, 43, 406, 823, 906, 416, 552, 156, 795, 846, 530, 43, 892, 419, 82, 614, 608, 192, 507, 890, 733, 302, 590, 208, 112, 79, 870, 321, 753, 687, 943, 906, 393, 589, 122, 851, 193, 194, 255, 787, 921, 0, 892, 178, 397]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_truncate> op.repair_truncate)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}U =  (<operator1> (<op_pso> op.w_pso(S1, w= (<w> 0.50) , c1= (<c1> 0.25) , c2= (<c2> 1.00) ))) {::}X  =  (<output> (<update_later> X)) {::}) {::}#Round 2{::} (<last_step> S1 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}S3 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}U  =  (<operator3> (<op_mut_de> op.w_mut_de(S1, S2, S3, beta= (<beta> 0.75) ))) {::}X  =  (<output_last> (<update_all> U)) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 200) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
-182.22582427866578
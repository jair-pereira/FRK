Generation:
0

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_truncate
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_random(U, 1)
    S2 = op.select_tournament(X, n=1, k=int(n*0.50))
    U  = op.w_crx_uni2(S1, S2, pr=1.00)
    X  = op.replace_if_random(X, U)
    #Round 2
    S1 = op.select_random(U, 1)
    U = op.w_pso(S1, w=0.25, c1=0.00, c2=2.00)
    X  = op.replace_if_best(X, U)
    #Round 3
    S1 = op.select_current(X)
    S2 = op.select_current(X)
    U  = op.w_crx_blend2(S1, S2, alpha=0.00)
    X  = U
    [Xi.getFitness() for Xi in X]
  return X
ge(100, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[199, 48, 957, 195, 92, 539, 103, 144, 888, 425, 748, 650, 844, 471, 986, 829, 499, 962, 440, 15, 63, 866, 803, 318, 983, 685, 864, 59, 33, 598, 970, 179, 894, 856, 668, 584, 224, 429, 683, 276, 600, 166, 968, 857, 888, 921, 505, 156, 177, 90, 554, 552, 655, 11, 945, 836, 503, 450, 270, 414, 467, 890, 956, 687, 809, 643]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_truncate> op.repair_truncate)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}S2 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.50)) ))) {::}U  =  (<operator2> (<op_crx_uni> op.w_crx_uni2(S1, S2, pr= (<pr> 1.00) ))) {::}X  =  (<output> (<update_better_than_random> op.replace_if_random(X, U))) {::}) {::}#Round 2{::} (<step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}U =  (<operator1> (<op_pso> op.w_pso(S1, w= (<w> 0.25) , c1= (<c1> 0.00) , c2= (<c2> 2.00) ))) {::}X  =  (<output> (<update_best> op.replace_if_best(X, U))) {::}) {::}#Round 3{::} (<last_step> S1 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}U  =  (<operator2> (<op_crx_blend> op.w_crx_blend2(S1, S2, alpha= (<alpha> 0.00) ))) {::}X  =  (<output_last> (<update_all> U)) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 100) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
-47.62740813600331
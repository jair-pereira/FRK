Generation:
1

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_truncate
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_current(X)
    U = op.w_mut_uni(S1, pr=1.00)
    X  = op.replace_if_best(X, U)
    #Round 2
    S1 = op.select_tournament(U, n=1, k=int(n*0.10))
    S2 = op.select_random(X, 1)
    U  = op.w_crx_blend2(S1, S2, alpha=0.05)
    X  = U
    [Xi.getFitness() for Xi in X]
  return X
ge(50, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[500, 718, 671, 510, 454, 628, 633, 962, 173, 938, 233, 597, 719, 341, 599, 607, 802, 808, 719, 445, 540, 836, 156, 804, 352, 56, 714, 741, 144, 900, 179, 547, 469, 20, 389, 849, 908, 660, 684, 730, 871, 795, 9, 409, 735]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_truncate> op.repair_truncate)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}U =  (<operator1> (<op_mut_uni> op.w_mut_uni(S1, pr= (<pr> 1.00) ))) {::}X  =  (<output> (<update_best> op.replace_if_best(X, U))) {::}) {::}#Round 2{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.10)) ))) {::}S2 =  (<select> (<select_random> op.select_random( (<X_or_U> X) , 1))) {::}U  =  (<operator2> (<op_crx_blend> op.w_crx_blend2(S1, S2, alpha= (<alpha> 0.05) ))) {::}X  =  (<output_last> (<update_all> U)) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 50) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
-16.923584670638782
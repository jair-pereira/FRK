Generation:
0

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_truncate
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(U, n=1, k=int(n*0.25))
    U = op.w_pso(S1, w=0.25, c1=0.00, c2=0.75)
    X  = U
    #Round 2
    S1 = op.select_random(U, 1)
    S2 = op.select_current(U)
    S3 = op.select_random(U, 1)
    U  = op.w_mut_de(S1, S2, S3, beta=0.50)
    X  = op.replace_if_best(X, U)
    #Round 3
    S1 = op.select_tournament(U, n=1, k=int(n*0.10))
    S2 = op.select_random(U, 1)
    S3 = op.select_current(U)
    U  = op.w_mut_de(S1, S2, S3, beta=1.00)
    X  = U
    #Round Drop
    X = op.drop_probability(X, pr=1.00)
    [Xi.getFitness() for Xi in X]
  return X
ge(200, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[903, 135, 571, 859, 911, 311, 861, 991, 176, 803, 326, 84, 352, 685, 438, 549, 676, 658, 611, 324, 881, 147, 89, 840, 71, 816, 489, 439, 987, 987, 788, 537, 933, 527, 994, 468, 529, 277, 225, 143, 45, 509, 213, 867, 878, 801, 688, 912, 309, 252, 31, 174, 346, 558, 371, 974, 947, 255, 836, 674, 398, 854, 59, 216, 302, 825, 99, 542, 512, 918, 366, 306, 611, 998, 671, 711, 972, 132, 342, 491, 96]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_truncate> op.repair_truncate)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.25)) ))) {::}U =  (<operator1> (<op_pso> op.w_pso(S1, w= (<w> 0.25) , c1= (<c1> 0.00) , c2= (<c2> 0.75) ))) {::}X  =  (<output> (<update_all> U)) {::}) {::}#Round 2{::} (<step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}S3 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}U  =  (<operator3> (<op_mut_de> op.w_mut_de(S1, S2, S3, beta= (<beta> 0.50) ))) {::}X  =  (<output> (<update_best> op.replace_if_best(X, U))) {::}) {::}#Round 3{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.10)) ))) {::}S2 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}S3 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}U  =  (<operator3> (<op_mut_de> op.w_mut_de(S1, S2, S3, beta= (<beta> 1.00) ))) {::}X  =  (<output_last> (<update_all> U)) {::})) {::}#Round Drop{::} (<drop> (<drop_random> X = op.drop_probability(X, pr= (<pr> 1.00) ){::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 200) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
-209.87065251433043
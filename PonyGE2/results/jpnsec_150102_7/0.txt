Generation:
0

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_random
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(X, n=1, k=1)
    U = op.w_mut_uni(S1, pr=1.00)
    X  = X
    #Round 2
    S1 = op.select_random(U, 1)
    S2 = op.select_tournament(U, n=1, k=n)
    U  = op.w_crx_blend2(S1, S2, alpha=0.10)
    X  = X
    #Round 3
    S1 = op.select_tournament(X, n=1, k=int(n*0.75))
    S2 = op.select_current(X)
    U  = op.w_crx_uni2(S1, S2, pr=0.25)
    X  = U
    #Round Drop
    X = op.drop_worst(X, pr=1.00, k=n) 
    [Xi.getFitness() for Xi in X]
  return X
ge(50, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[955, 994, 262, 555, 413, 710, 33, 895, 572, 694, 834, 569, 186, 674, 87, 42, 160, 552, 635, 569, 337, 113, 163, 557, 399, 737, 495, 723, 651, 442, 70, 953, 58, 346, 8, 448, 118, 746, 915, 401, 249, 991, 589, 593, 989, 203, 153, 364, 37, 451, 950, 295, 848, 804, 71, 437, 658, 220, 45, 875, 421, 134, 172, 791, 421, 5, 663, 411, 855, 212, 636, 280]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_random> op.repair_random)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> 1) ))) {::}U =  (<operator1> (<op_mut_uni> op.w_mut_uni(S1, pr= (<pr> 1.00) ))) {::}X  =  (<output> (<update_later> X)) {::}) {::}#Round 2{::} (<step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}S2 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> n) ))) {::}U  =  (<operator2> (<op_crx_blend> op.w_crx_blend2(S1, S2, alpha= (<alpha> 0.10) ))) {::}X  =  (<output> (<update_later> X)) {::}) {::}#Round 3{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.75)) ))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}U  =  (<operator2> (<op_crx_uni> op.w_crx_uni2(S1, S2, pr= (<pr> 0.25) ))) {::}X  =  (<output_last> (<update_all> U)) {::})) {::}#Round Drop{::} (<drop> (<drop_worst> X = op.drop_worst(X, pr= (<pr> 1.00) , k= (<k> n) ) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 50) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
1000.0546920480197
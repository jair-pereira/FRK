Generation:
0

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_random
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(U, n=1, k=int(n*0.50))
    U = op.w_levy_flight(S1)
    X  = op.replace_if_random(X, U)
    #Round 2
    S1 = op.select_random(X, 1)
    S2 = op.select_tournament(X, n=1, k=int(n*0.10))
    U  = op.w_crx_uni2(S1, S2, pr=0.50)
    X  = U
    #Round 3
    S1 = op.select_tournament(U, n=1, k=int(n*0.50))
    U  = op.w_pso(S1, w=0.00, c1=0.25, c2=2.00)
    X  = U
    [Xi.getFitness() for Xi in X]
  return X
ge(400, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[540, 403, 802, 878, 588, 857, 915, 853, 896, 789, 441, 859, 584, 526, 389, 127, 810, 158, 718, 451, 740, 188, 541, 584, 753, 102, 596, 703, 939, 175, 733, 699, 189, 711, 190, 924, 925, 401, 72, 458, 690, 187, 778, 634, 270, 1000, 131, 447, 986, 439, 34, 266, 672, 716, 200, 564, 789, 569, 75, 640, 805, 528, 499]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_random> op.repair_random)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.50)) ))) {::}U =  (<operator1> (<op_cs> op.w_levy_flight(S1))) {::}X  =  (<output> (<update_better_than_random> op.replace_if_random(X, U))) {::}) {::}#Round 2{::} (<step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> X) , 1))) {::}S2 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.10)) ))) {::}U  =  (<operator2> (<op_crx_uni> op.w_crx_uni2(S1, S2, pr= (<pr> 0.50) ))) {::}X  =  (<output> (<update_all> U)) {::}) {::}#Round 3{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.50)) ))) {::}U  =  (<operator1> (<op_pso> op.w_pso(S1, w= (<w> 0.00) , c1= (<c1> 0.25) , c2= (<c2> 2.00) ))) {::}X  =  (<output_last> (<update_all> U)) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 400) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
-16.861169643575153
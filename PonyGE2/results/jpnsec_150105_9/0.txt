Generation:
0

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_truncate
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(X, n=1, k=int(n*0.10))
    S2 = op.select_current(U)
    S3 = op.select_current(U)
    U  = op.w_mut_de(S1, S2, S3, beta=0.75)
    X  = X
    #Round 2
    S1 = op.select_random(U, 1)
    S2 = op.select_current(U)
    S3 = op.select_random(X, 1)
    U  = op.w_mut_de(S1, S2, S3, beta=0.75)
    X  = X
    #Round 3
    S1 = op.select_tournament(U, n=1, k=int(n*0.25))
    S2 = op.select_current(U)
    U  = op.w_crx_blend2(S1, S2, alpha=0.10)
    X  = op.replace_if_random(X, U)
    [Xi.getFitness() for Xi in X]
  return X
ge(400, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[903, 645, 123, 835, 236, 539, 689, 721, 459, 276, 913, 266, 601, 451, 203, 659, 367, 639, 890, 45, 855, 615, 503, 597, 331, 689, 518, 277, 319, 330, 150, 488, 967, 97, 561, 963, 161, 904, 793, 542, 165, 272, 86, 647, 393, 975, 501, 519, 962, 559, 562, 471, 701, 747, 540, 101, 599, 361, 91, 621, 906, 52, 121, 712, 928, 533, 968, 736, 812, 137, 847, 159, 530, 242, 295, 170, 820, 417]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_truncate> op.repair_truncate)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> int(n*0.10)) ))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}S3 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}U  =  (<operator3> (<op_mut_de> op.w_mut_de(S1, S2, S3, beta= (<beta> 0.75) ))) {::}X  =  (<output> (<update_later> X)) {::}) {::}#Round 2{::} (<step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}S3 =  (<select> (<select_random> op.select_random( (<X_or_U> X) , 1))) {::}U  =  (<operator3> (<op_mut_de> op.w_mut_de(S1, S2, S3, beta= (<beta> 0.75) ))) {::}X  =  (<output> (<update_later> X)) {::}) {::}#Round 3{::} (<last_step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.25)) ))) {::}S2 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}U  =  (<operator2> (<op_crx_blend> op.w_crx_blend2(S1, S2, alpha= (<alpha> 0.10) ))) {::}X  =  (<output_last> (<update_better_than_random> op.replace_if_random(X, U))) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 400) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
1004.1206227285284
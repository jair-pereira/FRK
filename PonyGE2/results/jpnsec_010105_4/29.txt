Generation:
29

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_random
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_tournament(X, n=1, k=n)
    S2 = op.select_tournament(U, n=1, k=int(n*0.10))
    S3 = op.select_current(U)
    U  = op.w_mut_de(S1, S2, S3, beta=0.50)
    X  = U
    #Round 2
    S1 = op.select_random(U, 1)
    S2 = op.select_random(U, 1)
    U  = op.w_crx_exp2(S1, S2, pr=0.75)
    X  = U
    [Xi.getFitness() for Xi in X]
  return X
ge(100, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[759, 239, 414, 659, 724, 520, 182, 472, 45, 812, 233, 874, 676, 921, 859, 542, 41, 919, 599, 761, 992, 860, 422, 682, 282, 520, 487, 708, 50, 691, 52, 279, 63, 186, 678, 377, 677, 119, 388, 617, 984, 639, 935, 261, 565, 345, 906, 447, 575, 952]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_random> op.repair_random)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> X) , n=1, k= (<k> n) ))) {::}S2 =  (<select> (<select_tournament> op.select_tournament( (<X_or_U> U) , n=1, k= (<k> int(n*0.10)) ))) {::}S3 =  (<select> (<select_current> op.select_current( (<X_or_U> U) ))) {::}U  =  (<operator3> (<op_mut_de> op.w_mut_de(S1, S2, S3, beta= (<beta> 0.50) ))) {::}X  =  (<output> (<update_all> U)) {::}) {::}#Round 2{::} (<last_step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}S2 =  (<select> (<select_random> op.select_random( (<X_or_U> U) , 1))) {::}U  =  (<operator2> (<op_crx_exp> op.w_crx_exp2(S1, S2, pr= (<pr> 0.75) ))) {::}X  =  (<output_last> (<update_all> U)) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 100) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
79.48
Generation:
29

Phenotype:
import numpy as np
from metaheuristic import *
def ge(n, my_func, bounds, dimension, max_nfe):
  Solution.setProblem(my_func, bounds, dimension, maximize=False)
  Solution.repair = op.repair_truncate
  X = Solution.initialize(n)
  for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension))
  [Xi.getFitness() for Xi in X]
  Solution.updateHistory(X)
  while Solution.nfe < max_nfe:
    U = X
    #Round 1
    S1 = op.select_current(X)
    U = op.w_pso(S1, w=0.00, c1=0.00, c2=1.00)
    X  = op.replace_if_random(X, U)
    #Round 2
    S1 = op.select_random(X, 1)
    U  = op.w_pso(S1, w=0.75, c1=0.00, c2=0.75)
    X  = U
    [Xi.getFitness() for Xi in X]
  return X
ge(100, my_func, bounds, dimension, max_nfe)
XXX_output_XXX = Solution.best.getFitness()

Genotype:
[655, 788, 733, 365, 162, 880, 339, 203, 585, 68, 948, 797, 666, 852, 394, 938, 766, 60, 456, 479, 844, 576, 410, 399, 672, 297, 477, 367, 265, 689, 47, 756, 573, 541, 386, 563, 349, 239, 570, 881, 854, 874, 701, 169, 360, 537, 322]
Tree:
(<S> (<init> import numpy as np{::}from metaheuristic import *{::}def ge(n, my_func, bounds, dimension, max_nfe):{:Solution.setProblem(my_func, bounds, dimension, maximize=False){::}Solution.repair =  (<repair> (<repair_truncate> op.repair_truncate)) {::}X = Solution.initialize(n){::}for Xi in X:    Xi.setX(op.init_random(*Solution.bounds, Solution.dimension)){::}[Xi.getFitness() for Xi in X]{::}Solution.updateHistory(X){::}while Solution.nfe < max_nfe:{:{::}U = X{::} (<main> (<round> #Round 1{::} (<step> S1 =  (<select> (<select_current> op.select_current( (<X_or_U> X) ))) {::}U =  (<operator1> (<op_pso> op.w_pso(S1, w= (<w> 0.00) , c1= (<c1> 0.00) , c2= (<c2> 1.00) ))) {::}X  =  (<output> (<update_better_than_random> op.replace_if_random(X, U))) {::}) {::}#Round 2{::} (<last_step> S1 =  (<select> (<select_random> op.select_random( (<X_or_U> X) , 1))) {::}U  =  (<operator1> (<op_pso> op.w_pso(S1, w= (<w> 0.75) , c1= (<c1> 0.00) , c2= (<c2> 0.75) ))) {::}X  =  (<output_last> (<update_all> U)) {::}))) {::}[Xi.getFitness() for Xi in X]:}{::}return X:}{::}) {::} (<call> ge( (<n> 100) , my_func, bounds, dimension, max_nfe){::}XXX_output_XXX = Solution.best.getFitness()))

Fitness:
79.48